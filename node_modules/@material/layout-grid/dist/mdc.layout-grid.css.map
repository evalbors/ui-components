{"version":3,"sources":["webpack:///./packages/mdc-layout-grid/mdc-layout-grid.scss","webpack:///./packages/mdc-layout-grid/_mixins.scss"],"names":[],"mappings":";;;;;;;AAyBA;EAEI;EAIA;EAIA;EARA;EAIA;EAIA;EARA;EAIA;EAIA;CAzBH;;AC0DG;EDzBJ;IC6DE;IACA;IACA,cD5Da;IC8Db;GD1FC;CACF;AC4CG;EDpBJ;IC6DE;IACA;IACA,cD5Da;IC8Db;GDlFC;CACF;AC+BG;EDfJ;IC6DE;IACA;IACA,cD5Da;IC8Db;GD1EC;CACF;;ACiCG;EDfJ;ICmEE;IACA;IACA;IACA;IAEA;GDjFC;ECmFD;ID1EF;MC2EI;MACA;MACA,eDzEW;MC2EX;MACA;KDjFC;GACF;CACF;ACSG;EDVJ;ICmEE;IACA;IACA;IACA;IAEA;GD/DC;ECiED;ID1EF;MC2EI;MACA;MACA,eDzEW;MC2EX;MACA;KD/DC;GACF;CACF;ACdG;EDLJ;ICmEE;IACA;IACA;IACA;IAEA;GD7CC;EC+CD;ID1EF;MC2EI;MACA;MACA,eDzEW;MC2EX;MACA;KD7CC;GACF;CACF;;ACtBG;EDJJ;ICwBE;IAEA;IAyDA;IACA;IAEA;GDnDC;ECPD;ID5BF;MC6BI;MACA;KDUC;GACF;EC+CD;IDxFF;MCyFI;KD5CC;GACF;EAjCc;;ICWf;IAEA;GDyBC;ECvBD;IDfe;;MCgBb;MACA;KD2BC;GACF;;EA7Cc;;ICWf;IAEA;GDsCC;ECpCD;IDfe;;MCgBb;MACA;KDwCC;GACF;;EA1Dc;;ICWf;IAEA;GDmDC;ECjDD;IDfe;;MCgBb;MACA;KDqDC;GACF;;EAvEc;;ICWf;IAEA;GDgEC;EC9DD;IDfe;;MCgBb;MACA;KDkEC;GACF;;EApFc;;ICWf;IAEA;GD6EC;EC3ED;IDfe;;MCgBb;MACA;KD+EC;GACF;;EAjGc;;ICWf;IAEA;GD0FC;ECxFD;IDfe;;MCgBb;MACA;KD4FC;GACF;;EA9Gc;;ICWf;IAEA;GDuGC;ECrGD;IDfe;;MCgBb;MACA;KDyGC;GACF;;EA3Hc;;ICWf;IAEA;GDoHC;EClHD;IDfe;;MCgBb;MACA;KDsHC;GACF;;EAxIc;;ICWf;IAEA;GDiIC;EC/HD;IDfe;;MCgBb;MACA;KDmIC;GACF;;EArJc;;ICWf;IAEA;GD8IC;EC5ID;IDfe;;MCgBb;MACA;KDgJC;GACF;;EAlKc;;ICWf;IAEA;GD2JC;ECzJD;IDfe;;MCgBb;MACA;KD6JC;GACF;;EA/Kc;;ICWf;IAEA;GDwKC;ECtKD;IDfe;;MCgBb;MACA;KD0KC;GACF;CACF;AC3MG;EDCJ;ICwBE;IAEA;IAyDA;IACA;IAEA;GD4HC;ECtLD;ID5BF;MC6BI;MACA;KDyLC;GACF;EChID;IDxFF;MCyFI;KDmIC;GACF;EAhNc;;ICWf;IAEA;GDwMC;ECtMD;IDfe;;MCgBb;MACA;KD0MC;GACF;;EA5Nc;;ICWf;IAEA;GDqNC;ECnND;IDfe;;MCgBb;MACA;KDuNC;GACF;;EAzOc;;ICWf;IAEA;GDkOC;EChOD;IDfe;;MCgBb;MACA;KDoOC;GACF;;EAtPc;;ICWf;IAEA;GD+OC;EC7OD;IDfe;;MCgBb;MACA;KDiPC;GACF;;EAnQc;;ICWf;IAEA;GD4PC;EC1PD;IDfe;;MCgBb;MACA;KD8PC;GACF;;EAhRc;;ICWf;IAEA;GDyQC;ECvQD;IDfe;;MCgBb;MACA;KD2QC;GACF;;EA7Rc;;ICWf;IAEA;GDsRC;ECpRD;IDfe;;MCgBb;MACA;KDwRC;GACF;;EA1Sc;;ICWf;IAEA;GDmSC;ECjSD;IDfe;;MCgBb;MACA;KDqSC;GACF;;EAvTc;;ICWf;IAEA;GDgTC;EC9SD;IDfe;;MCgBb;MACA;KDkTC;GACF;;EApUc;;ICWf;IAEA;GD6TC;EC3TD;IDfe;;MCgBb;MACA;KD+TC;GACF;;EAjVc;;ICWf;IAEA;GD0UC;ECxUD;IDfe;;MCgBb;MACA;KD4UC;GACF;;EA9Vc;;ICWf;IAEA;GDuVC;ECrVD;IDfe;;MCgBb;MACA;KDyVC;GACF;CACF;AC/XG;EDMJ;ICwBE;IAEA;IAyDA;IACA;IAEA;GD2SC;ECrWD;ID5BF;MC6BI;MACA;KDwWC;GACF;EC/SD;IDxFF;MCyFI;KDkTC;GACF;EA/Xc;;ICWf;IAEA;GDuXC;ECrXD;IDfe;;MCgBb;MACA;KDyXC;GACF;;EA3Yc;;ICWf;IAEA;GDoYC;EClYD;IDfe;;MCgBb;MACA;KDsYC;GACF;;EAxZc;;ICWf;IAEA;GDiZC;EC/YD;IDfe;;MCgBb;MACA;KDmZC;GACF;;EArac;;ICWf;IAEA;GD8ZC;EC5ZD;IDfe;;MCgBb;MACA;KDgaC;GACF;;EAlbc;;ICWf;IAEA;GD2aC;ECzaD;IDfe;;MCgBb;MACA;KD6aC;GACF;;EA/bc;;ICWf;IAEA;GDwbC;ECtbD;IDfe;;MCgBb;MACA;KD0bC;GACF;;EA5cc;;ICWf;IAEA;GDqcC;ECncD;IDfe;;MCgBb;MACA;KDucC;GACF;;EAzdc;;ICWf;IAEA;GDkdC;EChdD;IDfe;;MCgBb;MACA;KDodC;GACF;;EAtec;;ICWf;IAEA;GD+dC;EC7dD;IDfe;;MCgBb;MACA;KDieC;GACF;;EAnfc;;ICWf;IAEA;GD4eC;EC1eD;IDfe;;MCgBb;MACA;KD8eC;GACF;;EAhgBc;;ICWf;IAEA;GDyfC;ECvfD;IDfe;;MCgBb;MACA;KD2fC;GACF;;EA7gBc;;ICWf;IAEA;GDsgBC;ECpgBD;IDfe;;MCgBb;MACA;KDwgBC;GACF;CACF;AAhhBG;ECsEF,SDvEa;CAohBd;AAnhBG;ECsEF,SDvEa;CAuhBd;AAthBG;ECsEF,SDvEa;CA0hBd;AAzhBG;ECsEF,SDvEa;CA6hBd;AA5hBG;ECsEF,SDvEa;CAgiBd;AA/hBG;ECsEF,SDvEa;CAmiBd;AAliBG;ECsEF,SDvEa;CAsiBd;AAriBG;ECsEF,SDvEa;CAyiBd;AAxiBG;ECsEF,SDvEa;CA4iBd;AA3iBG;ECsEF,UDvEa;CA+iBd;AA9iBG;ECsEF,UDvEa;CAkjBd;AAjjBG;ECsEF,UDvEa;CAqjBd;AA9iBC;ECqEE;CD4eH;AC1eG;EDvEF;ICwEI;GD6eH;CACF;AAljBC;ECyEE;CD4eH;AAjjBC;ECyEE;CD2eH;ACzeG;ED3EF;IC4EI;GD4eH;CACF;;AC3lBG;EDuCJ;ICyFE;IAGA;GD8dC;CACF;ACvmBG;ED4CJ;ICyFE;IAGA;GDoeC;CACF;AClnBG;EDiDJ;ICyFE;IAGA;GD0eC;CACF;;AAtjBD;EACE;EACA;CAyjBD;;AAtjBD;EACE;EACA","file":"mdc.layout-grid.css","sourcesContent":["// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n@use 'sass:list';\n@use 'sass:map';\n@use './variables';\n@use './mixins';\n\n:root {\n  @each $size in map.keys(variables.$columns) {\n    --mdc-layout-grid-margin-#{$size}: #{map.get(\n        variables.$default-margin,\n        $size\n      )};\n    --mdc-layout-grid-gutter-#{$size}: #{map.get(\n        variables.$default-gutter,\n        $size\n      )};\n    --mdc-layout-grid-column-width-#{$size}: #{map.get(\n        variables.$column-width,\n        $size\n      )};\n  }\n}\n\n// postcss-bem-linter: define layout-grid\n.mdc-layout-grid {\n  @each $size in map.keys(variables.$columns) {\n    @include mixins.media-query_($size) {\n      $margin: map.get(variables.$default-margin, $size);\n\n      @include mixins.layout-grid($size, $margin, variables.$max-width);\n    }\n  }\n}\n\n.mdc-layout-grid__inner {\n  @each $size in map.keys(variables.$columns) {\n    @include mixins.media-query_($size) {\n      $margin: map.get(variables.$default-margin, $size);\n      $gutter: map.get(variables.$default-gutter, $size);\n\n      @include mixins.inner($size, $margin, $gutter);\n    }\n  }\n}\n\n.mdc-layout-grid__cell {\n  // select the upper breakpoint\n  $upper-breakpoint: list.nth(map.keys(variables.$columns), 1);\n\n  @each $size in map.keys(variables.$columns) {\n    @include mixins.media-query_($size) {\n      $gutter: map.get(variables.$default-gutter, $size);\n\n      @include mixins.cell($size, variables.$default-column-span, $gutter);\n\n      @for $span from 1 through map.get(variables.$columns, $upper-breakpoint) {\n        // Span classes.\n        // stylelint-disable max-nesting-depth\n        @at-root .mdc-layout-grid__cell--span-#{$span},\n          .mdc-layout-grid__cell--span-#{$span}-#{$size} {\n          @include mixins.cell-span_($size, $span, $gutter);\n        }\n        // stylelint-enable max-nesting-depth\n      }\n    }\n  }\n\n  // Order override classes.\n  @for $i from 1 through map.get(variables.$columns, $upper-breakpoint) {\n    &--order-#{$i} {\n      @include mixins.cell-order($i);\n    }\n  }\n\n  // Alignment classes.\n  &--align-top {\n    @include mixins.cell-align(top);\n  }\n\n  &--align-middle {\n    @include mixins.cell-align(middle);\n  }\n\n  &--align-bottom {\n    @include mixins.cell-align(bottom);\n  }\n}\n\n.mdc-layout-grid--fixed-column-width {\n  @each $size in map.keys(variables.$columns) {\n    @include mixins.media-query_($size) {\n      $margin: map.get(variables.$default-margin, $size);\n      $gutter: map.get(variables.$default-gutter, $size);\n      $column-width: map.get(variables.$column-width, $size);\n\n      @include mixins.fixed-column-width(\n        $size,\n        $margin,\n        $gutter,\n        $column-width\n      );\n    }\n  }\n}\n\n.mdc-layout-grid--align-left {\n  margin-right: auto;\n  margin-left: 0;\n}\n\n.mdc-layout-grid--align-right {\n  margin-right: 0;\n  margin-left: auto;\n}\n// postcss-bem-linter: end\n","// Copyright 2017 Google Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n@use './variables';\n\n// returns the lower grid boundary or null if the smallest grid is selected\n@function breakpoint-min($size) {\n  @if not map.has-key(variables.$columns, $size) {\n    @error \"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\";\n  }\n  $min: map.get(variables.$breakpoints, $size);\n\n  @return if($min > 0, $min, null);\n}\n\n// returns the upper grid boundary or null if the largest grid is selected\n@function breakpoint-max($size) {\n  @if not map.has-key(variables.$columns, $size) {\n    @error \"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\";\n  }\n  $names: map.keys(variables.$columns);\n  $n: list.index($names, $size);\n  $prev: if($n > 1, list.nth($names, $n - 1), null);\n\n  @return if($prev, (breakpoint-min($prev) - 1px), null);\n}\n\n// Private mixins, meant for internal use.\n@mixin media-query_($size) {\n  @if not map.has-key(variables.$columns, $size) {\n    @error \"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\";\n  }\n\n  $min: breakpoint-min($size);\n  $max: breakpoint-max($size);\n\n  @if $min == null and $max != null {\n    // Phone\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else if $min != null and $max != null {\n    // Tablet\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $min != null and $max == null {\n    // Desktop\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    // Fallback - no breakpoints defined\n    @content;\n  }\n}\n\n@mixin cell-span_($size, $span, $gutter) {\n  @if not map.has-key(variables.$columns, $size) {\n    @error \"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\";\n  }\n\n  $percent: math.percentage($span / map.get(variables.$columns, $size));\n\n  @if $percent > 100% {\n    $percent: 100%;\n  }\n\n  width: calc(#{$percent} - #{$gutter});\n  // stylelint-disable-next-line declaration-block-no-duplicate-properties\n  width: calc(#{$percent} - var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}));\n\n  @supports (display: grid) {\n    width: auto;\n    grid-column-end: span math.min($span, map.get(variables.$columns, $size));\n  }\n}\n\n// Public mixins, meant for developer usage.\n@mixin layout-grid($size, $margin, $max-width: null) {\n  @if not map.has-key(variables.$columns, $size) {\n    @error \"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\";\n  }\n\n  box-sizing: border-box;\n  margin: 0 auto;\n  padding: $margin;\n  // stylelint-disable-next-line declaration-block-no-duplicate-properties\n  padding: var(--mdc-layout-grid-margin-#{$size}, #{$margin});\n\n  @if $max-width {\n    max-width: $max-width;\n  }\n}\n\n@mixin inner($size, $margin, $gutter) {\n  @if not map.has-key(variables.$columns, $size) {\n    @error \"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\";\n  }\n\n  display: flex;\n  flex-flow: row wrap;\n  align-items: stretch;\n  margin: -$gutter / 2;\n  // stylelint-disable-next-line declaration-block-no-duplicate-properties\n  margin: calc(var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) / 2 * -1);\n\n  @supports (display: grid) {\n    display: grid;\n    margin: 0;\n    grid-gap: $gutter;\n    // stylelint-disable-next-line declaration-block-no-duplicate-properties\n    grid-gap: var(--mdc-layout-grid-gutter-#{$size}, $gutter);\n    grid-template-columns: repeat(\n      map.get(variables.$columns, $size),\n      minmax(0, 1fr)\n    );\n  }\n}\n\n@mixin cell($size, $default-span, $gutter) {\n  @if not map.has-key(variables.$columns, $size) {\n    @error \"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\";\n  }\n\n  @include cell-span_($size, $default-span, $gutter);\n\n  box-sizing: border-box;\n  margin: $gutter / 2;\n  // stylelint-disable-next-line declaration-block-no-duplicate-properties\n  margin: calc(var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) / 2);\n\n  @supports (display: grid) {\n    margin: 0;\n  }\n}\n\n@mixin cell-order($order) {\n  order: $order;\n}\n\n@mixin cell-align($position) {\n  @if $position == 'top' {\n    align-self: flex-start;\n\n    @supports (display: grid) {\n      align-self: start;\n    }\n  }\n\n  @if $position == 'middle' {\n    align-self: center;\n  }\n\n  @if $position == 'bottom' {\n    align-self: flex-end;\n\n    @supports (display: grid) {\n      align-self: end;\n    }\n  }\n\n  @if $position == 'stretch' {\n    align-self: stretch;\n  }\n}\n\n@mixin fixed-column-width($size, $margin, $gutter, $column-width) {\n  @if not map.has-key(variables.$columns, $size) {\n    @error \"Invalid style specified! Choose one of #{map.keys(variables.$columns)}\";\n  }\n\n  $columnCount: map.get(variables.$columns, $size);\n  $gutter-number: $columnCount - 1;\n  $margin-number: 2;\n\n  width: $column-width * $columnCount + $gutter * $gutter-number + $margin *\n    $margin-number;\n  // stylelint-disable-next-line declaration-block-no-duplicate-properties\n  width: calc(\n    var(--mdc-layout-grid-column-width-#{$size}, #{$column-width}) * #{$columnCount} +\n      var(--mdc-layout-grid-gutter-#{$size}, #{$gutter}) * #{$gutter-number} +\n      var(--mdc-layout-grid-margin-#{$size}, #{$margin}) * #{$margin-number}\n  );\n}\n"],"sourceRoot":""}